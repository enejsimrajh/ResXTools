using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using ResXTools.Library.Builders.Base;
using ResXTools.Library.Builders.Interfaces;

using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace ResXTools.Library.Builders.SharedBuilders
{
    public class ResourceFormatterBuilder : CodeBuilder
    {
        public ClassDeclarationSyntax ResourceFormatterClass { get; private set; }

        public ClassDeclarationSyntax FormatParameterClass { get; private set; }

        public override ICodeBuilder Build()
        {
            ResourceFormatterClass = GetResourceFormatterClass();
            FormatParameterClass = GetFormatParameterClass();

            return this;
        }

        private ClassDeclarationSyntax GetResourceFormatterClass()
        {
            return ClassDeclaration(Identifiers.ResourceFormatterClass)
                .WithModifiers(
                    TokenList(
                        new[]{
                            Token(SyntaxKind.PrivateKeyword),
                            Token(SyntaxKind.StaticKeyword)}))
                .WithMembers(
                    List<MemberDeclarationSyntax>(
                        new MemberDeclarationSyntax[]{
                            FieldDeclaration(
                                VariableDeclaration(
                                    PredefinedType(
                                        Token(SyntaxKind.CharKeyword)))
                                .WithVariables(
                                    SingletonSeparatedList<VariableDeclaratorSyntax>(
                                        VariableDeclarator(
                                            Identifier("OpeningTokenChar"))
                                        .WithInitializer(
                                            EqualsValueClause(
                                                LiteralExpression(
                                                    SyntaxKind.CharacterLiteralExpression,
                                                    Literal('{')))))))
                            .WithModifiers(
                                TokenList(
                                    new []{
                                        Token(SyntaxKind.PrivateKeyword),
                                        Token(SyntaxKind.ConstKeyword)})),
                            FieldDeclaration(
                                VariableDeclaration(
                                    PredefinedType(
                                        Token(SyntaxKind.CharKeyword)))
                                .WithVariables(
                                    SingletonSeparatedList<VariableDeclaratorSyntax>(
                                        VariableDeclarator(
                                            Identifier("ClosingTokenChar"))
                                        .WithInitializer(
                                            EqualsValueClause(
                                                LiteralExpression(
                                                    SyntaxKind.CharacterLiteralExpression,
                                                    Literal('}')))))))
                            .WithModifiers(
                                TokenList(
                                    new []{
                                        Token(SyntaxKind.PrivateKeyword),
                                        Token(SyntaxKind.ConstKeyword)})),
                            MethodDeclaration(
                                PredefinedType(
                                    Token(SyntaxKind.StringKeyword)),
                                Identifier("Format"))
                            .WithModifiers(
                                TokenList(
                                    new []{
                                        Token(SyntaxKind.PublicKeyword),
                                        Token(SyntaxKind.StaticKeyword)}))
                            .WithParameterList(
                                ParameterList(
                                    SeparatedList<ParameterSyntax>(
                                        new SyntaxNodeOrToken[]{
                                            Parameter(
                                                Identifier("value"))
                                            .WithType(
                                                PredefinedType(
                                                    Token(SyntaxKind.StringKeyword))),
                                            Token(SyntaxKind.CommaToken),
                                            Parameter(
                                                Identifier("parameters"))
                                            .WithType(
                                                GenericName(
                                                    Identifier("List"))
                                                .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SingletonSeparatedList<TypeSyntax>(
                                                            IdentifierName("FormatParameter")))))})))
                            .WithBody(
                                Block(
                                    SingletonList<StatementSyntax>(
                                        ReturnStatement(
                                            InvocationExpression(
                                                IdentifierName("Replace"))
                                            .WithArgumentList(
                                                ArgumentList(
                                                    SeparatedList<ArgumentSyntax>(
                                                        new SyntaxNodeOrToken[]{
                                                            Argument(
                                                                ParenthesizedExpression(
                                                                    InvocationExpression(
                                                                        IdentifierName("Unescape"))
                                                                    .WithArgumentList(
                                                                        ArgumentList(
                                                                            SingletonSeparatedList<ArgumentSyntax>(
                                                                                Argument(
                                                                                    IdentifierName("value"))))))),
                                                            Token(SyntaxKind.CommaToken),
                                                            Argument(
                                                                IdentifierName("parameters"))}))))))),
                            MethodDeclaration(
                                PredefinedType(
                                    Token(SyntaxKind.StringKeyword)),
                                Identifier("Replace"))
                            .WithModifiers(
                                TokenList(
                                    new []{
                                        Token(SyntaxKind.PublicKeyword),
                                        Token(SyntaxKind.StaticKeyword)}))
                            .WithParameterList(
                                ParameterList(
                                    SeparatedList<ParameterSyntax>(
                                        new SyntaxNodeOrToken[]{
                                            Parameter(
                                                Identifier("value"))
                                            .WithType(
                                                PredefinedType(
                                                    Token(SyntaxKind.StringKeyword))),
                                            Token(SyntaxKind.CommaToken),
                                            Parameter(
                                                Identifier("parameters"))
                                            .WithType(
                                                GenericName(
                                                    Identifier("List"))
                                                .WithTypeArgumentList(
                                                    TypeArgumentList(
                                                        SingletonSeparatedList<TypeSyntax>(
                                                            IdentifierName("FormatParameter")))))})))
                            .WithBody(
                                Block(
                                    SingletonList<StatementSyntax>(
                                        ReturnStatement(
                                            InvocationExpression(
                                                MemberAccessExpression(
                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                    InvocationExpression(
                                                        MemberAccessExpression(
                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                            IdentifierName("parameters"),
                                                            IdentifierName("Aggregate")))
                                                    .WithArgumentList(
                                                        ArgumentList(
                                                            SeparatedList<ArgumentSyntax>(
                                                                new SyntaxNodeOrToken[]{
                                                                    Argument(
                                                                        ObjectCreationExpression(
                                                                            IdentifierName("StringBuilder"))
                                                                        .WithArgumentList(
                                                                            ArgumentList(
                                                                                SingletonSeparatedList<ArgumentSyntax>(
                                                                                    Argument(
                                                                                        IdentifierName("value")))))),
                                                                    Token(SyntaxKind.CommaToken),
                                                                    Argument(
                                                                        ParenthesizedLambdaExpression()
                                                                        .WithParameterList(
                                                                            ParameterList(
                                                                                SeparatedList<ParameterSyntax>(
                                                                                    new SyntaxNodeOrToken[]{
                                                                                        Parameter(
                                                                                            Identifier("current")),
                                                                                        Token(SyntaxKind.CommaToken),
                                                                                        Parameter(
                                                                                            Identifier("parameter"))})))
                                                                        .WithExpressionBody(
                                                                            InvocationExpression(
                                                                                MemberAccessExpression(
                                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                                    IdentifierName("current"),
                                                                                    IdentifierName("Replace")))
                                                                            .WithArgumentList(
                                                                                ArgumentList(
                                                                                    SeparatedList<ArgumentSyntax>(
                                                                                        new SyntaxNodeOrToken[]{
                                                                                            Argument(
                                                                                                InterpolatedStringExpression(
                                                                                                    Token(SyntaxKind.InterpolatedStringStartToken))
                                                                                                .WithContents(
                                                                                                    List<InterpolatedStringContentSyntax>(
                                                                                                        new InterpolatedStringContentSyntax[]{
                                                                                                            InterpolatedStringText()
                                                                                                            .WithTextToken(
                                                                                                                Token(
                                                                                                                    TriviaList(),
                                                                                                                    SyntaxKind.InterpolatedStringTextToken,
                                                                                                                    "{{",
                                                                                                                    "{{",
                                                                                                                    TriviaList())),
                                                                                                            Interpolation(
                                                                                                                MemberAccessExpression(
                                                                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                                                                    IdentifierName("parameter"),
                                                                                                                    IdentifierName("Name"))),
                                                                                                            InterpolatedStringText()
                                                                                                            .WithTextToken(
                                                                                                                Token(
                                                                                                                    TriviaList(),
                                                                                                                    SyntaxKind.InterpolatedStringTextToken,
                                                                                                                    "}}",
                                                                                                                    "}}",
                                                                                                                    TriviaList()))}))),
                                                                                            Token(SyntaxKind.CommaToken),
                                                                                            Argument(
                                                                                                MemberAccessExpression(
                                                                                                    SyntaxKind.SimpleMemberAccessExpression,
                                                                                                    IdentifierName("parameter"),
                                                                                                    IdentifierName("ValueString")))})))))}))),
                                                    IdentifierName("ToString"))))))),
                            MethodDeclaration(
                                PredefinedType(
                                    Token(SyntaxKind.StringKeyword)),
                                Identifier("Unescape"))
                            .WithModifiers(
                                TokenList(
                                    new []{
                                        Token(SyntaxKind.PublicKeyword),
                                        Token(SyntaxKind.StaticKeyword)}))
                            .WithParameterList(
                                ParameterList(
                                    SingletonSeparatedList<ParameterSyntax>(
                                        Parameter(
                                            Identifier("value"))
                                        .WithType(
                                            PredefinedType(
                                                Token(SyntaxKind.StringKeyword))))))
                            .WithBody(
                                Block(
                                    LocalDeclarationStatement(
                                        VariableDeclaration(
                                            IdentifierName(
                                                Identifier(
                                                    TriviaList(),
                                                    SyntaxKind.VarKeyword,
                                                    "var",
                                                    "var",
                                                    TriviaList())))
                                        .WithVariables(
                                            SingletonSeparatedList<VariableDeclaratorSyntax>(
                                                VariableDeclarator(
                                                    Identifier("unescapedValue"))
                                                .WithInitializer(
                                                    EqualsValueClause(
                                                        ObjectCreationExpression(
                                                            IdentifierName("StringBuilder"))
                                                        .WithArgumentList(
                                                            ArgumentList(
                                                                SingletonSeparatedList<ArgumentSyntax>(
                                                                    Argument(
                                                                        MemberAccessExpression(
                                                                            SyntaxKind.SimpleMemberAccessExpression,
                                                                            IdentifierName("value"),
                                                                            IdentifierName("Length"))))))))))),
                                    ForStatement(
                                        Block(
                                            LocalDeclarationStatement(
                                                VariableDeclaration(
                                                    PredefinedType(
                                                        Token(SyntaxKind.CharKeyword)))
                                                .WithVariables(
                                                    SingletonSeparatedList<VariableDeclaratorSyntax>(
                                                        VariableDeclarator(
                                                            Identifier("@char"))
                                                        .WithInitializer(
                                                            EqualsValueClause(
                                                                ElementAccessExpression(
                                                                    IdentifierName("value"))
                                                                .WithArgumentList(
                                                                    BracketedArgumentList(
                                                                        SingletonSeparatedList<ArgumentSyntax>(
                                                                            Argument(
                                                                                IdentifierName("index")))))))))),
                                            IfStatement(
                                                BinaryExpression(
                                                    SyntaxKind.LogicalOrExpression,
                                                    BinaryExpression(
                                                        SyntaxKind.EqualsExpression,
                                                        IdentifierName("@char"),
                                                        IdentifierName("OpeningTokenChar")),
                                                    BinaryExpression(
                                                        SyntaxKind.EqualsExpression,
                                                        IdentifierName("@char"),
                                                        IdentifierName("ClosingTokenChar"))),
                                                Block(
                                                    LocalDeclarationStatement(
                                                        VariableDeclaration(
                                                            PredefinedType(
                                                                Token(SyntaxKind.IntKeyword)))
                                                        .WithVariables(
                                                            SingletonSeparatedList<VariableDeclaratorSyntax>(
                                                                VariableDeclarator(
                                                                    Identifier("nextIndex"))
                                                                .WithInitializer(
                                                                    EqualsValueClause(
                                                                        BinaryExpression(
                                                                            SyntaxKind.AddExpression,
                                                                            IdentifierName("index"),
                                                                            LiteralExpression(
                                                                                SyntaxKind.NumericLiteralExpression,
                                                                                Literal(1)))))))),
                                                    IfStatement(
                                                        BinaryExpression(
                                                            SyntaxKind.LogicalAndExpression,
                                                            BinaryExpression(
                                                                SyntaxKind.LessThanExpression,
                                                                IdentifierName("nextIndex"),
                                                                IdentifierName("length")),
                                                            BinaryExpression(
                                                                SyntaxKind.EqualsExpression,
                                                                ElementAccessExpression(
                                                                    IdentifierName("value"))
                                                                .WithArgumentList(
                                                                    BracketedArgumentList(
                                                                        SingletonSeparatedList<ArgumentSyntax>(
                                                                            Argument(
                                                                                IdentifierName("nextIndex"))))),
                                                                IdentifierName("@char"))),
                                                        Block(
                                                            ExpressionStatement(
                                                                InvocationExpression(
                                                                    MemberAccessExpression(
                                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                                        IdentifierName("unescapedValue"),
                                                                        IdentifierName("Append")))
                                                                .WithArgumentList(
                                                                    ArgumentList(
                                                                        SingletonSeparatedList<ArgumentSyntax>(
                                                                            Argument(
                                                                                ElementAccessExpression(
                                                                                    IdentifierName("value"))
                                                                                .WithArgumentList(
                                                                                    BracketedArgumentList(
                                                                                        SingletonSeparatedList<ArgumentSyntax>(
                                                                                            Argument(
                                                                                                IdentifierName("nextIndex")))))))))),
                                                            ExpressionStatement(
                                                                PostfixUnaryExpression(
                                                                    SyntaxKind.PostIncrementExpression,
                                                                    IdentifierName("index"))),
                                                            ContinueStatement())))),
                                            ExpressionStatement(
                                                InvocationExpression(
                                                    MemberAccessExpression(
                                                        SyntaxKind.SimpleMemberAccessExpression,
                                                        IdentifierName("unescapedValue"),
                                                        IdentifierName("Append")))
                                                .WithArgumentList(
                                                    ArgumentList(
                                                        SingletonSeparatedList<ArgumentSyntax>(
                                                            Argument(
                                                                IdentifierName("@char"))))))))
                                    .WithDeclaration(
                                        VariableDeclaration(
                                            PredefinedType(
                                                Token(SyntaxKind.IntKeyword)))
                                        .WithVariables(
                                            SeparatedList<VariableDeclaratorSyntax>(
                                                new SyntaxNodeOrToken[]{
                                                    VariableDeclarator(
                                                        Identifier("index"))
                                                    .WithInitializer(
                                                        EqualsValueClause(
                                                            LiteralExpression(
                                                                SyntaxKind.NumericLiteralExpression,
                                                                Literal(0)))),
                                                    Token(SyntaxKind.CommaToken),
                                                    VariableDeclarator(
                                                        Identifier("length"))
                                                    .WithInitializer(
                                                        EqualsValueClause(
                                                            MemberAccessExpression(
                                                                SyntaxKind.SimpleMemberAccessExpression,
                                                                IdentifierName("value"),
                                                                IdentifierName("Length"))))})))
                                    .WithCondition(
                                        BinaryExpression(
                                            SyntaxKind.LessThanExpression,
                                            IdentifierName("index"),
                                            IdentifierName("length")))
                                    .WithIncrementors(
                                        SingletonSeparatedList<ExpressionSyntax>(
                                            PostfixUnaryExpression(
                                                SyntaxKind.PostIncrementExpression,
                                                IdentifierName("index")))),
                                    ReturnStatement(
                                        InvocationExpression(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("unescapedValue"),
                                                IdentifierName("ToString"))))))}));
        }

        private ClassDeclarationSyntax GetFormatParameterClass()
        {
            return ClassDeclaration("FormatParameter")
                .WithModifiers(
                    TokenList(
                        Token(SyntaxKind.PrivateKeyword)))
                .WithMembers(
                    List<MemberDeclarationSyntax>(
                        new MemberDeclarationSyntax[]{
                            ConstructorDeclaration(
                                Identifier("FormatParameter"))
                            .WithModifiers(
                                TokenList(
                                    Token(SyntaxKind.PublicKeyword)))
                            .WithParameterList(
                                ParameterList(
                                    SeparatedList<ParameterSyntax>(
                                        new SyntaxNodeOrToken[]{
                                            Parameter(
                                                Identifier("name"))
                                            .WithType(
                                                PredefinedType(
                                                    Token(SyntaxKind.StringKeyword))),
                                            Token(SyntaxKind.CommaToken),
                                            Parameter(
                                                Identifier("value"))
                                            .WithType(
                                                PredefinedType(
                                                    Token(SyntaxKind.ObjectKeyword)))})))
                            .WithBody(
                                Block(
                                    SingletonList<StatementSyntax>(
                                        Block(
                                            ExpressionStatement(
                                                AssignmentExpression(
                                                    SyntaxKind.SimpleAssignmentExpression,
                                                    IdentifierName("Name"),
                                                    IdentifierName("name"))),
                                            ExpressionStatement(
                                                AssignmentExpression(
                                                    SyntaxKind.SimpleAssignmentExpression,
                                                    IdentifierName("Value"),
                                                    IdentifierName("value"))))))),
                            PropertyDeclaration(
                                PredefinedType(
                                    Token(SyntaxKind.StringKeyword)),
                                Identifier("Name"))
                            .WithModifiers(
                                TokenList(
                                    Token(SyntaxKind.PublicKeyword)))
                            .WithAccessorList(
                                AccessorList(
                                    List<AccessorDeclarationSyntax>(
                                        new AccessorDeclarationSyntax[]{
                                            AccessorDeclaration(
                                                SyntaxKind.GetAccessorDeclaration)
                                            .WithSemicolonToken(
                                                Token(SyntaxKind.SemicolonToken)),
                                            AccessorDeclaration(
                                                SyntaxKind.SetAccessorDeclaration)
                                            .WithSemicolonToken(
                                                Token(SyntaxKind.SemicolonToken))}))),
                            PropertyDeclaration(
                                PredefinedType(
                                    Token(SyntaxKind.ObjectKeyword)),
                                Identifier("Value"))
                            .WithModifiers(
                                TokenList(
                                    Token(SyntaxKind.PublicKeyword)))
                            .WithAccessorList(
                                AccessorList(
                                    List<AccessorDeclarationSyntax>(
                                        new AccessorDeclarationSyntax[]{
                                            AccessorDeclaration(
                                                SyntaxKind.GetAccessorDeclaration)
                                            .WithSemicolonToken(
                                                Token(SyntaxKind.SemicolonToken)),
                                            AccessorDeclaration(
                                                SyntaxKind.SetAccessorDeclaration)
                                            .WithSemicolonToken(
                                                Token(SyntaxKind.SemicolonToken))}))),
                            PropertyDeclaration(
                                PredefinedType(
                                    Token(SyntaxKind.StringKeyword)),
                                Identifier("ValueString"))
                            .WithModifiers(
                                TokenList(
                                    Token(SyntaxKind.PublicKeyword)))
                            .WithExpressionBody(
                                ArrowExpressionClause(
                                    ConditionalExpression(
                                        BinaryExpression(
                                            SyntaxKind.NotEqualsExpression,
                                            IdentifierName("Value"),
                                            LiteralExpression(
                                                SyntaxKind.NullLiteralExpression)),
                                        InvocationExpression(
                                            MemberAccessExpression(
                                                SyntaxKind.SimpleMemberAccessExpression,
                                                IdentifierName("Value"),
                                                IdentifierName("ToString"))),
                                        MemberAccessExpression(
                                            SyntaxKind.SimpleMemberAccessExpression,
                                            PredefinedType(
                                                Token(SyntaxKind.StringKeyword)),
                                            IdentifierName("Empty")))))
                            .WithSemicolonToken(
                                Token(SyntaxKind.SemicolonToken))}));
        }
    }
}