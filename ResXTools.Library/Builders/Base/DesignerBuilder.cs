using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Resources.NetStandard;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using ResXTools.Library.Builders.Interfaces;
using ResXTools.Library.Builders.SharedBuilders;
using ResXTools.Library.Models;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace ResXTools.Library.Builders.Base
{
    public abstract class DesignerBuilder : ClassBuilder, IDesignerBuilder
    {
        protected SyntaxTree _syntaxTree;
        protected readonly List<Resource> _resources;

        private readonly ResourceKeysBuilder _keysBuilder;
        private readonly ResourceFormatterBuilder _formatterBuilder;

        public DesignerBuilder(string resourceFile, string classNamespace) : base(GetClassName(resourceFile), classNamespace)
        {
            _resources = new List<Resource>();
            using (var resourceReader = new ResXResourceReader(resourceFile))
            {
                foreach (DictionaryEntry resource in resourceReader)
                {
                    _resources.Add(new Resource((string)resource.Key, (string)resource.Value));
                }
            }

            _keysBuilder = new ResourceKeysBuilder(_resources);
            _formatterBuilder = new ResourceFormatterBuilder();
        }

        public override ICodeBuilder Build()
        {
            _syntaxTree = SyntaxTree(
                CompilationUnit()
                .WithMembers(
                    SingletonList<MemberDeclarationSyntax>(
                        NamespaceDeclaration(
                            IdentifierName(_classNamespace))
                        .WithNamespaceKeyword(
                            Token(
                                TriviaList(GetHeaderComments()),
                                SyntaxKind.NamespaceKeyword,
                                TriviaList()))
                        .WithUsings(
                            List<UsingDirectiveSyntax>(GetUsingDirectives()))
                        .WithMembers(
                            SingletonList<MemberDeclarationSyntax>(
                                ClassDeclaration(_className)
                                .WithModifiers(
                                    TokenList(
                                        new[]{
                                            Token(SyntaxKind.PublicKeyword),
                                            Token(SyntaxKind.SealedKeyword)}))
                                .WithMembers(
                                    List<MemberDeclarationSyntax>(GetClassMembers()))))))
                .NormalizeWhitespace()
            );

            return this;
        }

        /// <returns>A string that represents the entire source text.</returns>
        public override string ToString() => _syntaxTree.ToString();

        protected virtual SyntaxTrivia[] GetHeaderComments()
        {
            return new SyntaxTrivia[]
            {
                Comment("//------------------------------------------------------------------------------"),
                Comment("// <auto-generated>"),
                Comment("//     This code was generated by ResXCodeGen."),
                Comment("//     Runtime Version:" + Environment.Version),
                Comment("//"),
                Comment("//     Changes to this file may cause incorrect behavior and will be lost if"),
                Comment("//     the code is regenerated."),
                Comment("// </auto-generated>"),
                Comment("//------------------------------------------------------------------------------")
            };
        }

        protected virtual UsingDirectiveSyntax[] GetUsingDirectives()
        {
            return new UsingDirectiveSyntax[]
            {
                UsingDirective(
                    QualifiedName(
                        QualifiedName(
                            IdentifierName("System"),
                            IdentifierName("Collections")),
                        IdentifierName("Generic"))),
                UsingDirective(
                    QualifiedName(
                        IdentifierName("System"),
                        IdentifierName("Linq"))),
                UsingDirective(
                    QualifiedName(
                        IdentifierName("System"),
                        IdentifierName("Text"))),
                UsingDirective(
                    QualifiedName(
                        QualifiedName(
                            IdentifierName("Microsoft"),
                            IdentifierName("Extensions")),
                        IdentifierName("Localization")))
            };
        }

        protected virtual List<MemberDeclarationSyntax> GetClassMembers()
        {
            var classMembers = new List<MemberDeclarationSyntax>();

            classMembers.AddRange(GetFields());
            classMembers.Add(GetConstructor());
            classMembers.AddRange(GetResourceAccessors());

            _keysBuilder.Build();
            classMembers.Add(_keysBuilder.KeysClass);

            _formatterBuilder.Build();
            classMembers.Add(_formatterBuilder.ResourceFormatterClass);
            classMembers.Add(_formatterBuilder.FormatParameterClass);

            return classMembers;
        }

        protected abstract FieldDeclarationSyntax[] GetFields();

        protected abstract ConstructorDeclarationSyntax GetConstructor();

        protected abstract List<MemberDeclarationSyntax> GetResourceAccessors();

        private static string GetClassName(string resourceFile) => Path.GetFileNameWithoutExtension(resourceFile);
    }
}